



-- WAREHOUSE DDL begins below. Not setting default values here because all data comes from the OLTP




CREATE TABLE PLANS(
    PLANID NUMBER(10) NOT NULL PRIMARY KEY,
    PLANNAME VARCHAR2(255),
    CHARGES VARCHAR2(255)
);






CREATE TABLE ACCOUNT(
    ACCOUNTID NUMBER(10) NOT NULL PRIMARY KEY,
    NAMEONACCOUNT VARCHAR2(255),
    USEREMAIL VARCHAR2(255),
    USERPASSWORD VARCHAR2(255),
    REGION VARCHAR2(255),
    CREATEDDATE DATE,
    UPDATEDDATE DATE
);




CREATE TABLE PAYMENT(
    PAYMENTID NUMBER(10) NOT NULL PRIMARY KEY,
    ACCOUNTID NUMBER(10) NOT NULL,
    CC_NUMBER VARCHAR2(255),
    EXPIRATIONDATE DATE,
    CVV VARCHAR2(255),
    ZIP VARCHAR2(50),
    CONSTRAINT FK_PAYMENT_TO_ACCOUNT
        FOREIGN KEY (ACCOUNTID) 
        REFERENCES ACCOUNT(ACCOUNTID)
);




CREATE TABLE SUBSCRIPTION(
    SUSBCRIPTIONID NUMBER(10) NOT NULL PRIMARY KEY,
    ACCOUNTID NUMBER(10),
    PLANID NUMBER(10),
    PAYMENTDUE NUMBER(15,2),
    VALIDTILL DATE,
    CREATEDDATE DATE,
    UPDATEDDATE DATE,
    CONSTRAINT FK_SUBSCRIPTION_TO_ACCOUNT
        FOREIGN KEY (ACCOUNTID) 
        REFERENCES ACCOUNT(ACCOUNTID),
    CONSTRAINT FK_SUBSCRIPTION_TO_PLANS
        FOREIGN KEY (PLANID) 
        REFERENCES PLANS(PLANID)
);



CREATE TABLE PROFILES(
    PROFILEID NUMBER(10) NOT NULL PRIMARY KEY,
    ACCOUNTID NUMBER(10),
    NAMEOFPROFILE VARCHAR2(255),
    CREATEDDATE DATE,
    UPDATEDDATE DATE,
    CONSTRAINT FK_PROFILES_TO_ACCOUNT
        FOREIGN KEY (ACCOUNTID) 
        REFERENCES ACCOUNT(ACCOUNTID)
);




CREATE TABLE CONTENT (
    CONTENTID NUMBER(10) NOT NULL PRIMARY KEY,
    CONTENTTYPE VARCHAR2(255),
    DESCRIPTIONOFCONTENT VARCHAR2(255),
    CONTENTLANGUAGE VARCHAR2(255),
    TITLE VARCHAR2(255),
    RATING NUMBER(3) CHECK (
    RATING > 0
    AND RATING <= 5
  ),
    DURATIONTIME NUMBER(10),
    CREATEDDATE DATE,
    UPDATEDDATE DATE,
    NOOFVIEWS NUMBER(10),
    GENRE VARCHAR2(255)
);


CREATE TABLE PROFILES_CONTENT_LINKING(
    PROFILES_CONTENT_LINKING_ID NUMBER(10) NOT NULL,
    PROFILEID NUMBER(10) NOT NULL  ,
    CONTENTID NUMBER(10) NOT NULL ,
    PRIMARY KEY(PROFILEID,CONTENTID),
    CONSTRAINT FK_PROFILES_CONTENT_LINKING_TO_PROFILES 
        FOREIGN KEY (PROFILEID) 
        REFERENCES PROFILES(PROFILEID),
    CONSTRAINT FK_PROFILES_CONTENT_LINKING_TO_CONTENT 
        FOREIGN KEY (CONTENTID) 
        REFERENCES CONTENT(CONTENTID)
);


CREATE TABLE JOB_DEPARTMENT(
    JOBID NUMBER(10) NOT NULL PRIMARY KEY,
    JOBDEPT VARCHAR2(255),
    DEPTDESC VARCHAR2(255),
    DESCRIPTION VARCHAR2(255),
    SALARYRANGE VARCHAR2(255)
);





-- Employee Table connect the Support OLTP and Payroll OLTP



CREATE TABLE EMPLOYEE(
    EMPLOYEEID NUMBER(10) NOT NULL PRIMARY KEY,
    FIRSTNAME VARCHAR2(255),
    MIDDLENAME VARCHAR2(255),
    LASTNAME VARCHAR2(255),
    GENDER VARCHAR2(1),
    AGE NUMBER(3),
    ADDRESS VARCHAR2(255),
    JOBID NUMBER(10),
    EMPLOYEELEVEL NUMBER(3) CHECK (
    EMPLOYEELEVEL > 0
    AND EMPLOYEELEVEL <= 5
  ),
    EMAIL VARCHAR2(255),
    PHONE VARCHAR2(15),
    CHECK(GENDER in ('M', 'F', 'O')),
    CONSTRAINT FK_EMPLOYEE_TO_JOBDEPARTMENT
        FOREIGN KEY (JOBID) 
        REFERENCES JOB_DEPARTMENT(JOBID)
);


-- Ticket table connects Operations OLTP to Support OLTP

CREATE TABLE TICKET(
    TICKETID NUMBER(10) NOT NULL PRIMARY KEY,
    USERID NUMBER(10),
    STATUS VARCHAR2(255),
    DESCRIPTION VARCHAR2(255),
    PRIORITY VARCHAR2(255),
    TIMESTART DATE,
    TIMEEND DATE,
    CHATHISTORY VARCHAR2(255),
    REGION VARCHAR2(255),
    EMPLOYEEID NUMBER(10),
    CONSTRAINT FK_TICKET_TO_EMPLOYEE
        FOREIGN KEY (EMPLOYEEID) 
        REFERENCES EMPLOYEE(EMPLOYEEID),
    CONSTRAINT FK_TICKET_TO_CONTACTS
        FOREIGN KEY (USERID) 
        REFERENCES ACCOUNT(ACCOUNTID)
);


CREATE TABLE LEAVE
(
   LEAVEID              NUMBER(10)        PRIMARY KEY,
   EMPLOYEEID           NUMBER(10)      REFERENCES EMPLOYEE(EMPLOYEEID) NOT NULL,
   STARTDATE            DATE            NOT NULL,
   END_DATE              DATE            NOT NULL,
   STATUS                VARCHAR(4)      NOT NULL,
   REASON                VARCHAR(30)     NOT NULL
);
  
  CREATE TABLE SALARY_BONUS
(
   SALARYID             NUMBER(10)       PRIMARY KEY,
   EMPLOYEEID           NUMBER(10)     REFERENCES EMPLOYEE(EMPLOYEEID) NOT NULL,
   AMOUNT                NUMBER(10)     NOT NULL,
   ANUUAL                NUMBER(10)     NOT NULL,
   BONUS                 NUMBER(10)     NOT NULL   
);


CREATE TABLE PAYROLL
(
   PAYROLLID           NUMBER(10)       PRIMARY KEY,
   EMPLOYEEID          NUMBER(10)     REFERENCES EMPLOYEE(EMPLOYEEID) NOT NULL,
   JOBID               NUMBER(10)     REFERENCES JOB_DEPARTMENT(JOBID) NOT NULL,
   SALARYID            NUMBER(10)     REFERENCES SALARY_BONUS(SALARYID) NOT NULL,
   LEAVEID             NUMBER(10)     REFERENCES LEAVE(LEAVEID) NOT NULL,
   DATEGENERATED       DATE           NOT NULL,
   HOURSWORKED         NUMBER(4)      NOT NULL,
   PAYROLLREPORT       VARCHAR(40)    NOT NULL,
   TOTALAMOUNT         NUMBER(10)     NOT NULL
   
); 




--COMMIT;



